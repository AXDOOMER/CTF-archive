# https://wiki.python.org/moin/BitManipulation
# https://stackoverflow.com/questions/48684885/c-sharp-changing-least-significant-bit-image-algorithm


exe = (open("8efb499bf8967e02ce91335d3c8f5e2f.exe", "r+b")).read()
pic = (open("egg.data", "r+b")).read()

print(len(exe))
print(len(pic))


print(len(pic)*1.0/len(exe))

# exe: 01001101 01011010 10010000 00000000

exepos = 0
data = "";

def getexedata(b):
	global exepos
	if exepos < 251904 * 8:
		boolean = ord(exe[exepos / 8]) & (1 << (7-exepos) % 8) != 0
	else:
		boolean = b
	exepos += 1

#	if exepos == 50:
#		exit()

	if boolean == 1:
#		print(1)
		return "1"
	else:
#		print(0)
		return "0"

for pos in range(len(pic) * 8):
#	if pos % 8 == 0:
#		print("")

	# Bit order is reversed, (7-pos) will reverse them
	boolean = ord(pic[pos / 8]) & (1 << (7-pos) % 8) != 0

	if pos % 8 == 7:
		data += getexedata(boolean)
#		print(2)
	else:
		if boolean == 1:
			data += "1"
#			print(1)
		else:
			data += "0"
#			print(0)

#print(data)

print(len(data) / 8.0)

with open("imgdata.data", 'wa') as out:
	for pos in range(len(pic)):
		na = data[pos*8 : pos*8+8]
		sa = ''.join(na)
#		print(sa)
		ca = chr(int(sa, 2))
		out.write(ca)

